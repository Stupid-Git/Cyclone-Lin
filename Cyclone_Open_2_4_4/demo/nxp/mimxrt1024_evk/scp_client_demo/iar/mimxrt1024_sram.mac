//************************************************************
//* i.MX RT1024 macro file (running code from internal SRAM) *
//************************************************************

_clock_init()
{
  __var reg;
  // Enable all clocks
  __writeMemory32(0xffffffff, 0x400FC068, "Memory");
  __writeMemory32(0xffffffff, 0x400FC06C, "Memory");
  __writeMemory32(0xffffffff, 0x400FC070, "Memory");
  __writeMemory32(0xffffffff, 0x400FC074, "Memory");
  __writeMemory32(0xffffffff, 0x400FC078, "Memory");
  __writeMemory32(0xffffffff, 0x400FC07C, "Memory");
  __writeMemory32(0xffffffff, 0x400FC080, "Memory");

  // IPG_PODF: 2 divide by 3
  __writeMemory32(0x000A8200, 0x400FC014, "Memory");  
  // PERCLK_PODF: 1 divide by 2
  __writeMemory32(0x04900001, 0x400FC01C, "Memory");  
  // Enable SYS PLL but keep it bypassed.
  __writeMemory32(0x00012001, 0x400D8030, "Memory"); 
  do
  {
    reg = __readMemory32(0x400D8030, "Memory");
  }while((reg & 0x80000000) == 0);
  // Disable bypass of SYS PLL
  __writeMemory32(0x00002001, 0x400D8030, "Memory");  

  // Ungate SYS PLL PFD2
  reg = __readMemory32(0x400D8100, "Memory");
  reg &= ~0x800000;
  __writeMemory32(reg, 0x400D8100, "Memory");   

  //   SEMC_ALT_CLK_SEL: 0 PLL2 (SYS PLL) PFD2
  //   SEMC_CLK_SEL: 1 SEMC_ALT_CLK
  //   SEMC_PODF: 5 divide by 6
  reg = __readMemory32(0x400FC014, "Memory");
  reg &= ~0x700C0;
  reg |= 0x50040;
  __writeMemory32(reg, 0x400FC014, "Memory");   

  // Disable MPU which will be enabled by ROM to prevent code execution
  reg = __readMemory32(0xE000ED94, "Memory");
  reg &= ~0x1;
  __writeMemory32(reg, 0xE000ED94, "Memory");   
  
  __message "clock init done\n";
}

restoreFlexRAM()
{
    __var base;
    __var value;

    base = 0x400AC000;

    value = __readMemory32(base + 0x44, "Memory");
    value &= ~(0xFFFF);
    value |= 0x5FA5;
    __writeMemory32(value, base + 0x44, "Memory");

    value = __readMemory32(base + 0x40, "Memory");
    value |= (1 << 2);
    __writeMemory32(value, base + 0x40, "Memory");
    __message "FlexRAM configuration is restored";
}

execUserPreload()
{
  restoreFlexRAM();
  _clock_init();
  __message "execUserPreload() done.\n";
}

execUserReset()
{
  restoreFlexRAM();
  _clock_init();
  __message "execUserReset() done.\n";
}
