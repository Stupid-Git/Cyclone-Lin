//************************************************************
//* i.MX RT1176 macro file (running code from internal SRAM) *
//************************************************************

__var rev;

initSysPll2()
{
    __var t;

    // ANADIG_PLL_PLL_528_CTRL
    t = __readMemory32(0x40C84240, "Memory");
    if (t & 0x800000)
    {
        // SysPll2 has been initialized
        t &= ~0x40000000;
        __writeMemory32(t, 0x40C84240, "Memory");
        return;
    }

    t = __readMemory32(0x40C84270, "Memory");
    t |= 0x80808080;
    __writeMemory32(t, 0x40C84270, "Memory");

    t = __readMemory32(0x40C84240, "Memory");
    t &= ~(0x802000);
    t |= 0x40000000;
    __writeMemory32(t, 0x40C84240, "Memory");
    
    // ANADIG_PLL_PLL_528_MFN
    __writeMemory32(0, 0x40C84280, "Memory");
    // ANADIG_PLL_PLL_528_MFI
    __writeMemory32(22, 0x40C84290, "Memory");
    // ANADIG_PLL_PLL_528_MFD
    __writeMemory32(0x0FFFFFFF, 0x40C842A0, "Memory");

    // ANADIG_PLL_PLL_528_CTRL
    __writeMemory32(0x40000008, 0x40C84240, "Memory");
    __delay(30);

    // ANADIG_PLL_PLL_528_CTRL
    t = __readMemory32(0x40C84240, "Memory");
    t |= 0x800000 | 0x800;
    __writeMemory32(t, 0x40C84240, "Memory");
    __delay(250);

    t = __readMemory32(0x40C84240, "Memory");
    t &= ~0x800;
    __writeMemory32(t, 0x40C84240, "Memory");

    do
    {
        t = __readMemory32(0x40C84240, "Memory");
    } while ((t & 0x20000000) == 0);

    t |= 0x2000;
    __writeMemory32(t, 0x40C84240, "Memory");

    t &= ~0x40000000;
    __writeMemory32(t, 0x40C84240, "Memory");
}


initSysPll2Pfd1()
{
    __var t, stable;
    t = __readMemory32(0x40C84270, "Memory");
    if (((t & 0x8000) != 0) || (((t & 0x3F00) >> 8) != 16))
    {
        stable = t & 0x4000;

        t |= 0x8000;
        __writeMemory32(t, 0x40C84270, "Memory");

        t = __readMemory32(0x40C84270, "Memory");
        t &= ~0x3F00;
        t |= 16 << 8;
        __writeMemory32(t, 0x40C84270, "Memory");

        t = __readMemory32(0x40C84250, "Memory");
        t ^= 0x4;
        __writeMemory32(t, 0x40C84250, "Memory");

        t = __readMemory32(0x40C84270, "Memory");
        t &= ~0x8000;
        __writeMemory32(t, 0x40C84270, "Memory");

        do
        {
            t = __readMemory32(0x40C84270, "Memory") & 0x4000;
        } while (t == stable);
    }
    else
    {
        t &= ~0x8000;
        __writeMemory32(t, 0x40C84270, "Memory");
    }
}

setSemcClock()
{
    initSysPll2();
    initSysPll2Pfd1();
    // Set SEMC root clock to use sys pll2 pfd1 divided by 3: 198Mhz
    __writeMemory32(0x602, 0x40cc0200, "Memory");
}

restoreFlexRAM()
{
    __var base;
    __var value;

    base = 0x400E4000;

    value = __readMemory32(base + 0x44, "Memory");
    value &= ~(0xFFFF);
    value |= 0xFFAA;
    __writeMemory32(value, base + 0x44, "Memory");
    value = __readMemory32(base + 0x48, "Memory");
    value &= ~(0xFFFF);
    value |= 0xFFAA;
    __writeMemory32(value, base + 0x48, "Memory");

    value = __readMemory32(base + 0x40, "Memory");
    value &= ~(0xFF << 8);
    value |= 0x7 | (0xaa << 8);
    __writeMemory32(value, base + 0x40, "Memory");
    __message "FlexRAM configuration is restored";
}

execUserPreload()
{
    restoreFlexRAM();
    setSemcClock();
}
